
services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SECRET_KEY: ${SECRET_KEY}
        DEBUG: ${DEBUG}
        DATABASE_URL: ${DATABASE_URL}
        API_HOST: ${API_HOST}
        FRONTEND_URL1: ${FRONTEND_URL1}
        FRONTEND_URL2: ${FRONTEND_URL2}
    image: YOUR_IMAGE_NAME
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DATABASE_URL=${DATABASE_URL}
      - API_HOST=${API_HOST}
      - FRONTEND_URL1=${FRONTEND_URL1}
      - FRONTEND_URL2=${FRONTEND_URL2}
    command: >
      sh -c "python3 manage.py migrate &&
             uvicorn 'ecommerce.asgi:application' --host=0.0.0.0 --port=8000"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    
volumes:
  new_volume:
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

